namespace SwiftyTypst {
};

[Error]
enum FileError {
    "NotFound",
    "AccessDenied",
    "IsDirectory",
    "NotSource",
    "InvalidUtf8",
    "Package",
    "Other",
};

[Enum]
interface CompilationResult {
    Document(sequence<u8> data);
    Errors(sequence<string> errors);
};

enum Tag {
    "Comment",
    "Punctuation",
    "Escape",
    "Strong",
    "Emph",
    "Link",
    "Raw",
    "Label",
    "Ref",
    "Heading",
    "ListMarker",
    "ListTerm",
    "MathDelimiter",
    "MathOperator",
    "Keyword",
    "Operator",
    "Number",
    "String",
    "Function",
    "Interpolated",
    "Error"
};

dictionary HighlightResult {
    u64 start;
    u64 end;
    Tag tag;
};

enum AutocompleteKind {
    "Syntax",
    "Func",
    "Param",
    "Constant",
    "Symbol",
    "Type"
};

dictionary AutocompleteResult {
    AutocompleteKind kind;
    string label;
    string completion;
    string description;
};

dictionary FontDefinition {
    sequence<u8> data;
};

interface TypstCompiler {
    constructor(FileReader file_reader, string main);
    [Throws=FileError]
    void set_main(string main);
    void notify_change();
    CompilationResult compile();
    sequence<HighlightResult> highlight(string file_path);
    sequence<AutocompleteResult> autocomplete(string file_path, u64 line, u64 column);
    void add_font(FontDefinition font);
};

callback interface FileReader {
    [Throws=FileReaderError]
    sequence<u8> read(string path);
};

[Error]
enum FileReaderError {
    "NotFound",
    "AccessDenied",
    "IsDirectory",
    "NotSource",
    "InvalidUtf8",
    "FfiCallbackError",
    "Other",
};
