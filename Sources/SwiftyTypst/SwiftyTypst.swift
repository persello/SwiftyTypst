// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(SwiftyTypstFFI)
import SwiftyTypstFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_SwiftyTypst_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_SwiftyTypst_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_PANIC: Int8 = 2

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_PANIC:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.


fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}


public protocol TypstCompilerProtocol {
    func `setMain`(`main`: String)  throws
    func `addFont`(`font`: FontDefinition)  
    func `notifyChange`()  
    func `compile`(`delegate`: TypstCompilerDelegate)  
    func `highlight`(`delegate`: TypstSourceDelegate, `filePath`: String)  
    func `autocomplete`(`delegate`: TypstSourceDelegate, `filePath`: String, `line`: UInt64, `column`: UInt64)  
    
}

public class TypstCompiler: TypstCompilerProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }
    public convenience init(`fileManager`: FileManager, `main`: String)  {
        self.init(unsafeFromRawPointer: try! rustCall() {
    uniffi_SwiftyTypst_fn_constructor_typstcompiler_new(
        FfiConverterCallbackInterfaceFileManager.lower(`fileManager`),
        FfiConverterString.lower(`main`),$0)
})
    }

    deinit {
        try! rustCall { uniffi_SwiftyTypst_fn_free_typstcompiler(pointer, $0) }
    }

    

    
    

    public func `setMain`(`main`: String) throws {
        try 
    rustCallWithError(FfiConverterTypeFileError.lift) {
    uniffi_SwiftyTypst_fn_method_typstcompiler_set_main(self.pointer, 
        FfiConverterString.lower(`main`),$0
    )
}
    }

    public func `addFont`(`font`: FontDefinition)  {
        try! 
    rustCall() {
    
    uniffi_SwiftyTypst_fn_method_typstcompiler_add_font(self.pointer, 
        FfiConverterTypeFontDefinition.lower(`font`),$0
    )
}
    }

    public func `notifyChange`()  {
        try! 
    rustCall() {
    
    uniffi_SwiftyTypst_fn_method_typstcompiler_notify_change(self.pointer, $0
    )
}
    }

    public func `compile`(`delegate`: TypstCompilerDelegate)  {
        try! 
    rustCall() {
    
    uniffi_SwiftyTypst_fn_method_typstcompiler_compile(self.pointer, 
        FfiConverterCallbackInterfaceTypstCompilerDelegate.lower(`delegate`),$0
    )
}
    }

    public func `highlight`(`delegate`: TypstSourceDelegate, `filePath`: String)  {
        try! 
    rustCall() {
    
    uniffi_SwiftyTypst_fn_method_typstcompiler_highlight(self.pointer, 
        FfiConverterCallbackInterfaceTypstSourceDelegate.lower(`delegate`),
        FfiConverterString.lower(`filePath`),$0
    )
}
    }

    public func `autocomplete`(`delegate`: TypstSourceDelegate, `filePath`: String, `line`: UInt64, `column`: UInt64)  {
        try! 
    rustCall() {
    
    uniffi_SwiftyTypst_fn_method_typstcompiler_autocomplete(self.pointer, 
        FfiConverterCallbackInterfaceTypstSourceDelegate.lower(`delegate`),
        FfiConverterString.lower(`filePath`),
        FfiConverterUInt64.lower(`line`),
        FfiConverterUInt64.lower(`column`),$0
    )
}
    }
}

public struct FfiConverterTypeTypstCompiler: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = TypstCompiler

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TypstCompiler {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: TypstCompiler, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> TypstCompiler {
        return TypstCompiler(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: TypstCompiler) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public func FfiConverterTypeTypstCompiler_lift(_ pointer: UnsafeMutableRawPointer) throws -> TypstCompiler {
    return try FfiConverterTypeTypstCompiler.lift(pointer)
}

public func FfiConverterTypeTypstCompiler_lower(_ value: TypstCompiler) -> UnsafeMutableRawPointer {
    return FfiConverterTypeTypstCompiler.lower(value)
}


public struct AutocompleteResult {
    public var `kind`: AutocompleteKind
    public var `label`: String
    public var `completion`: String
    public var `description`: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`kind`: AutocompleteKind, `label`: String, `completion`: String, `description`: String) {
        self.`kind` = `kind`
        self.`label` = `label`
        self.`completion` = `completion`
        self.`description` = `description`
    }
}


extension AutocompleteResult: Equatable, Hashable {
    public static func ==(lhs: AutocompleteResult, rhs: AutocompleteResult) -> Bool {
        if lhs.`kind` != rhs.`kind` {
            return false
        }
        if lhs.`label` != rhs.`label` {
            return false
        }
        if lhs.`completion` != rhs.`completion` {
            return false
        }
        if lhs.`description` != rhs.`description` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`kind`)
        hasher.combine(`label`)
        hasher.combine(`completion`)
        hasher.combine(`description`)
    }
}


public struct FfiConverterTypeAutocompleteResult: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AutocompleteResult {
        return try AutocompleteResult(
            `kind`: FfiConverterTypeAutocompleteKind.read(from: &buf), 
            `label`: FfiConverterString.read(from: &buf), 
            `completion`: FfiConverterString.read(from: &buf), 
            `description`: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: AutocompleteResult, into buf: inout [UInt8]) {
        FfiConverterTypeAutocompleteKind.write(value.`kind`, into: &buf)
        FfiConverterString.write(value.`label`, into: &buf)
        FfiConverterString.write(value.`completion`, into: &buf)
        FfiConverterString.write(value.`description`, into: &buf)
    }
}


public func FfiConverterTypeAutocompleteResult_lift(_ buf: RustBuffer) throws -> AutocompleteResult {
    return try FfiConverterTypeAutocompleteResult.lift(buf)
}

public func FfiConverterTypeAutocompleteResult_lower(_ value: AutocompleteResult) -> RustBuffer {
    return FfiConverterTypeAutocompleteResult.lower(value)
}


public struct CompilationError {
    public var `severity`: Severity
    public var `sourcePath`: String?
    public var `range`: SourceRange?
    public var `message`: String
    public var `hints`: [String]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`severity`: Severity, `sourcePath`: String?, `range`: SourceRange?, `message`: String, `hints`: [String]) {
        self.`severity` = `severity`
        self.`sourcePath` = `sourcePath`
        self.`range` = `range`
        self.`message` = `message`
        self.`hints` = `hints`
    }
}


extension CompilationError: Equatable, Hashable {
    public static func ==(lhs: CompilationError, rhs: CompilationError) -> Bool {
        if lhs.`severity` != rhs.`severity` {
            return false
        }
        if lhs.`sourcePath` != rhs.`sourcePath` {
            return false
        }
        if lhs.`range` != rhs.`range` {
            return false
        }
        if lhs.`message` != rhs.`message` {
            return false
        }
        if lhs.`hints` != rhs.`hints` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`severity`)
        hasher.combine(`sourcePath`)
        hasher.combine(`range`)
        hasher.combine(`message`)
        hasher.combine(`hints`)
    }
}


public struct FfiConverterTypeCompilationError: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CompilationError {
        return try CompilationError(
            `severity`: FfiConverterTypeSeverity.read(from: &buf), 
            `sourcePath`: FfiConverterOptionString.read(from: &buf), 
            `range`: FfiConverterOptionTypeSourceRange.read(from: &buf), 
            `message`: FfiConverterString.read(from: &buf), 
            `hints`: FfiConverterSequenceString.read(from: &buf)
        )
    }

    public static func write(_ value: CompilationError, into buf: inout [UInt8]) {
        FfiConverterTypeSeverity.write(value.`severity`, into: &buf)
        FfiConverterOptionString.write(value.`sourcePath`, into: &buf)
        FfiConverterOptionTypeSourceRange.write(value.`range`, into: &buf)
        FfiConverterString.write(value.`message`, into: &buf)
        FfiConverterSequenceString.write(value.`hints`, into: &buf)
    }
}


public func FfiConverterTypeCompilationError_lift(_ buf: RustBuffer) throws -> CompilationError {
    return try FfiConverterTypeCompilationError.lift(buf)
}

public func FfiConverterTypeCompilationError_lower(_ value: CompilationError) -> RustBuffer {
    return FfiConverterTypeCompilationError.lower(value)
}


public struct FontDefinition {
    public var `data`: [UInt8]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`data`: [UInt8]) {
        self.`data` = `data`
    }
}


extension FontDefinition: Equatable, Hashable {
    public static func ==(lhs: FontDefinition, rhs: FontDefinition) -> Bool {
        if lhs.`data` != rhs.`data` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`data`)
    }
}


public struct FfiConverterTypeFontDefinition: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FontDefinition {
        return try FontDefinition(
            `data`: FfiConverterSequenceUInt8.read(from: &buf)
        )
    }

    public static func write(_ value: FontDefinition, into buf: inout [UInt8]) {
        FfiConverterSequenceUInt8.write(value.`data`, into: &buf)
    }
}


public func FfiConverterTypeFontDefinition_lift(_ buf: RustBuffer) throws -> FontDefinition {
    return try FfiConverterTypeFontDefinition.lift(buf)
}

public func FfiConverterTypeFontDefinition_lower(_ value: FontDefinition) -> RustBuffer {
    return FfiConverterTypeFontDefinition.lower(value)
}


public struct HighlightResult {
    public var `start`: UInt64
    public var `end`: UInt64
    public var `tag`: Tag

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`start`: UInt64, `end`: UInt64, `tag`: Tag) {
        self.`start` = `start`
        self.`end` = `end`
        self.`tag` = `tag`
    }
}


extension HighlightResult: Equatable, Hashable {
    public static func ==(lhs: HighlightResult, rhs: HighlightResult) -> Bool {
        if lhs.`start` != rhs.`start` {
            return false
        }
        if lhs.`end` != rhs.`end` {
            return false
        }
        if lhs.`tag` != rhs.`tag` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`start`)
        hasher.combine(`end`)
        hasher.combine(`tag`)
    }
}


public struct FfiConverterTypeHighlightResult: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> HighlightResult {
        return try HighlightResult(
            `start`: FfiConverterUInt64.read(from: &buf), 
            `end`: FfiConverterUInt64.read(from: &buf), 
            `tag`: FfiConverterTypeTag.read(from: &buf)
        )
    }

    public static func write(_ value: HighlightResult, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.`start`, into: &buf)
        FfiConverterUInt64.write(value.`end`, into: &buf)
        FfiConverterTypeTag.write(value.`tag`, into: &buf)
    }
}


public func FfiConverterTypeHighlightResult_lift(_ buf: RustBuffer) throws -> HighlightResult {
    return try FfiConverterTypeHighlightResult.lift(buf)
}

public func FfiConverterTypeHighlightResult_lower(_ value: HighlightResult) -> RustBuffer {
    return FfiConverterTypeHighlightResult.lower(value)
}


public struct SourceLocation {
    public var `byteOffset`: UInt64
    public var `line`: UInt64
    public var `column`: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`byteOffset`: UInt64, `line`: UInt64, `column`: UInt64) {
        self.`byteOffset` = `byteOffset`
        self.`line` = `line`
        self.`column` = `column`
    }
}


extension SourceLocation: Equatable, Hashable {
    public static func ==(lhs: SourceLocation, rhs: SourceLocation) -> Bool {
        if lhs.`byteOffset` != rhs.`byteOffset` {
            return false
        }
        if lhs.`line` != rhs.`line` {
            return false
        }
        if lhs.`column` != rhs.`column` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`byteOffset`)
        hasher.combine(`line`)
        hasher.combine(`column`)
    }
}


public struct FfiConverterTypeSourceLocation: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SourceLocation {
        return try SourceLocation(
            `byteOffset`: FfiConverterUInt64.read(from: &buf), 
            `line`: FfiConverterUInt64.read(from: &buf), 
            `column`: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: SourceLocation, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.`byteOffset`, into: &buf)
        FfiConverterUInt64.write(value.`line`, into: &buf)
        FfiConverterUInt64.write(value.`column`, into: &buf)
    }
}


public func FfiConverterTypeSourceLocation_lift(_ buf: RustBuffer) throws -> SourceLocation {
    return try FfiConverterTypeSourceLocation.lift(buf)
}

public func FfiConverterTypeSourceLocation_lower(_ value: SourceLocation) -> RustBuffer {
    return FfiConverterTypeSourceLocation.lower(value)
}


public struct SourceRange {
    public var `start`: SourceLocation
    public var `end`: SourceLocation

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`start`: SourceLocation, `end`: SourceLocation) {
        self.`start` = `start`
        self.`end` = `end`
    }
}


extension SourceRange: Equatable, Hashable {
    public static func ==(lhs: SourceRange, rhs: SourceRange) -> Bool {
        if lhs.`start` != rhs.`start` {
            return false
        }
        if lhs.`end` != rhs.`end` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`start`)
        hasher.combine(`end`)
    }
}


public struct FfiConverterTypeSourceRange: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SourceRange {
        return try SourceRange(
            `start`: FfiConverterTypeSourceLocation.read(from: &buf), 
            `end`: FfiConverterTypeSourceLocation.read(from: &buf)
        )
    }

    public static func write(_ value: SourceRange, into buf: inout [UInt8]) {
        FfiConverterTypeSourceLocation.write(value.`start`, into: &buf)
        FfiConverterTypeSourceLocation.write(value.`end`, into: &buf)
    }
}


public func FfiConverterTypeSourceRange_lift(_ buf: RustBuffer) throws -> SourceRange {
    return try FfiConverterTypeSourceRange.lift(buf)
}

public func FfiConverterTypeSourceRange_lower(_ value: SourceRange) -> RustBuffer {
    return FfiConverterTypeSourceRange.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum AutocompleteKind {
    
    case `syntax`
    case `func`
    case `param`
    case `constant`
    case `symbol`
    case `type`
}

public struct FfiConverterTypeAutocompleteKind: FfiConverterRustBuffer {
    typealias SwiftType = AutocompleteKind

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AutocompleteKind {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .`syntax`
        
        case 2: return .`func`
        
        case 3: return .`param`
        
        case 4: return .`constant`
        
        case 5: return .`symbol`
        
        case 6: return .`type`
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AutocompleteKind, into buf: inout [UInt8]) {
        switch value {
        
        
        case .`syntax`:
            writeInt(&buf, Int32(1))
        
        
        case .`func`:
            writeInt(&buf, Int32(2))
        
        
        case .`param`:
            writeInt(&buf, Int32(3))
        
        
        case .`constant`:
            writeInt(&buf, Int32(4))
        
        
        case .`symbol`:
            writeInt(&buf, Int32(5))
        
        
        case .`type`:
            writeInt(&buf, Int32(6))
        
        }
    }
}


public func FfiConverterTypeAutocompleteKind_lift(_ buf: RustBuffer) throws -> AutocompleteKind {
    return try FfiConverterTypeAutocompleteKind.lift(buf)
}

public func FfiConverterTypeAutocompleteKind_lower(_ value: AutocompleteKind) -> RustBuffer {
    return FfiConverterTypeAutocompleteKind.lower(value)
}


extension AutocompleteKind: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum CompilationResult {
    
    case `document`(`data`: [UInt8], `warnings`: [CompilationError])
    case `errors`(`errors`: [CompilationError])
}

public struct FfiConverterTypeCompilationResult: FfiConverterRustBuffer {
    typealias SwiftType = CompilationResult

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CompilationResult {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .`document`(
            `data`: try FfiConverterSequenceUInt8.read(from: &buf), 
            `warnings`: try FfiConverterSequenceTypeCompilationError.read(from: &buf)
        )
        
        case 2: return .`errors`(
            `errors`: try FfiConverterSequenceTypeCompilationError.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: CompilationResult, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .`document`(`data`,`warnings`):
            writeInt(&buf, Int32(1))
            FfiConverterSequenceUInt8.write(`data`, into: &buf)
            FfiConverterSequenceTypeCompilationError.write(`warnings`, into: &buf)
            
        
        case let .`errors`(`errors`):
            writeInt(&buf, Int32(2))
            FfiConverterSequenceTypeCompilationError.write(`errors`, into: &buf)
            
        }
    }
}


public func FfiConverterTypeCompilationResult_lift(_ buf: RustBuffer) throws -> CompilationResult {
    return try FfiConverterTypeCompilationResult.lift(buf)
}

public func FfiConverterTypeCompilationResult_lower(_ value: CompilationResult) -> RustBuffer {
    return FfiConverterTypeCompilationResult.lower(value)
}


extension CompilationResult: Equatable, Hashable {}



public enum FileError {

    
    
    // Simple error enums only carry a message
    case NotFound(message: String)
    
    // Simple error enums only carry a message
    case AccessDenied(message: String)
    
    // Simple error enums only carry a message
    case IsDirectory(message: String)
    
    // Simple error enums only carry a message
    case NotSource(message: String)
    
    // Simple error enums only carry a message
    case InvalidUtf8(message: String)
    
    // Simple error enums only carry a message
    case Package(message: String)
    
    // Simple error enums only carry a message
    case Other(message: String)
    

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeFileError.lift(error)
    }
}


public struct FfiConverterTypeFileError: FfiConverterRustBuffer {
    typealias SwiftType = FileError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FileError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .NotFound(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .AccessDenied(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .IsDirectory(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .NotSource(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 5: return .InvalidUtf8(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 6: return .Package(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 7: return .Other(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: FileError, into buf: inout [UInt8]) {
        switch value {

        

        
        case let .NotFound(message):
            writeInt(&buf, Int32(1))
        case let .AccessDenied(message):
            writeInt(&buf, Int32(2))
        case let .IsDirectory(message):
            writeInt(&buf, Int32(3))
        case let .NotSource(message):
            writeInt(&buf, Int32(4))
        case let .InvalidUtf8(message):
            writeInt(&buf, Int32(5))
        case let .Package(message):
            writeInt(&buf, Int32(6))
        case let .Other(message):
            writeInt(&buf, Int32(7))

        
        }
    }
}


extension FileError: Equatable, Hashable {}

extension FileError: Error { }

public enum FileManagerError {

    
    
    // Simple error enums only carry a message
    case NotFound(message: String)
    
    // Simple error enums only carry a message
    case AccessDenied(message: String)
    
    // Simple error enums only carry a message
    case IsDirectory(message: String)
    
    // Simple error enums only carry a message
    case NotSource(message: String)
    
    // Simple error enums only carry a message
    case InvalidUtf8(message: String)
    
    // Simple error enums only carry a message
    case FfiCallbackError(message: String)
    
    // Simple error enums only carry a message
    case Other(message: String)
    

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeFileManagerError.lift(error)
    }
}


public struct FfiConverterTypeFileManagerError: FfiConverterRustBuffer {
    typealias SwiftType = FileManagerError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FileManagerError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .NotFound(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .AccessDenied(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .IsDirectory(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .NotSource(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 5: return .InvalidUtf8(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 6: return .FfiCallbackError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 7: return .Other(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: FileManagerError, into buf: inout [UInt8]) {
        switch value {

        

        
        case let .NotFound(message):
            writeInt(&buf, Int32(1))
        case let .AccessDenied(message):
            writeInt(&buf, Int32(2))
        case let .IsDirectory(message):
            writeInt(&buf, Int32(3))
        case let .NotSource(message):
            writeInt(&buf, Int32(4))
        case let .InvalidUtf8(message):
            writeInt(&buf, Int32(5))
        case let .FfiCallbackError(message):
            writeInt(&buf, Int32(6))
        case let .Other(message):
            writeInt(&buf, Int32(7))

        
        }
    }
}


extension FileManagerError: Equatable, Hashable {}

extension FileManagerError: Error { }

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum Severity {
    
    case `error`
    case `warning`
}

public struct FfiConverterTypeSeverity: FfiConverterRustBuffer {
    typealias SwiftType = Severity

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Severity {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .`error`
        
        case 2: return .`warning`
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Severity, into buf: inout [UInt8]) {
        switch value {
        
        
        case .`error`:
            writeInt(&buf, Int32(1))
        
        
        case .`warning`:
            writeInt(&buf, Int32(2))
        
        }
    }
}


public func FfiConverterTypeSeverity_lift(_ buf: RustBuffer) throws -> Severity {
    return try FfiConverterTypeSeverity.lift(buf)
}

public func FfiConverterTypeSeverity_lower(_ value: Severity) -> RustBuffer {
    return FfiConverterTypeSeverity.lower(value)
}


extension Severity: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum Tag {
    
    case `comment`
    case `punctuation`
    case `escape`
    case `strong`
    case `emph`
    case `link`
    case `raw`
    case `label`
    case `ref`
    case `heading`
    case `listMarker`
    case `listTerm`
    case `mathDelimiter`
    case `mathOperator`
    case `keyword`
    case `operator`
    case `number`
    case `string`
    case `function`
    case `interpolated`
    case `error`
}

public struct FfiConverterTypeTag: FfiConverterRustBuffer {
    typealias SwiftType = Tag

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Tag {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .`comment`
        
        case 2: return .`punctuation`
        
        case 3: return .`escape`
        
        case 4: return .`strong`
        
        case 5: return .`emph`
        
        case 6: return .`link`
        
        case 7: return .`raw`
        
        case 8: return .`label`
        
        case 9: return .`ref`
        
        case 10: return .`heading`
        
        case 11: return .`listMarker`
        
        case 12: return .`listTerm`
        
        case 13: return .`mathDelimiter`
        
        case 14: return .`mathOperator`
        
        case 15: return .`keyword`
        
        case 16: return .`operator`
        
        case 17: return .`number`
        
        case 18: return .`string`
        
        case 19: return .`function`
        
        case 20: return .`interpolated`
        
        case 21: return .`error`
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Tag, into buf: inout [UInt8]) {
        switch value {
        
        
        case .`comment`:
            writeInt(&buf, Int32(1))
        
        
        case .`punctuation`:
            writeInt(&buf, Int32(2))
        
        
        case .`escape`:
            writeInt(&buf, Int32(3))
        
        
        case .`strong`:
            writeInt(&buf, Int32(4))
        
        
        case .`emph`:
            writeInt(&buf, Int32(5))
        
        
        case .`link`:
            writeInt(&buf, Int32(6))
        
        
        case .`raw`:
            writeInt(&buf, Int32(7))
        
        
        case .`label`:
            writeInt(&buf, Int32(8))
        
        
        case .`ref`:
            writeInt(&buf, Int32(9))
        
        
        case .`heading`:
            writeInt(&buf, Int32(10))
        
        
        case .`listMarker`:
            writeInt(&buf, Int32(11))
        
        
        case .`listTerm`:
            writeInt(&buf, Int32(12))
        
        
        case .`mathDelimiter`:
            writeInt(&buf, Int32(13))
        
        
        case .`mathOperator`:
            writeInt(&buf, Int32(14))
        
        
        case .`keyword`:
            writeInt(&buf, Int32(15))
        
        
        case .`operator`:
            writeInt(&buf, Int32(16))
        
        
        case .`number`:
            writeInt(&buf, Int32(17))
        
        
        case .`string`:
            writeInt(&buf, Int32(18))
        
        
        case .`function`:
            writeInt(&buf, Int32(19))
        
        
        case .`interpolated`:
            writeInt(&buf, Int32(20))
        
        
        case .`error`:
            writeInt(&buf, Int32(21))
        
        }
    }
}


public func FfiConverterTypeTag_lift(_ buf: RustBuffer) throws -> Tag {
    return try FfiConverterTypeTag.lift(buf)
}

public func FfiConverterTypeTag_lower(_ value: Tag) -> RustBuffer {
    return FfiConverterTypeTag.lower(value)
}


extension Tag: Equatable, Hashable {}



fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate typealias UniFFICallbackHandle = UInt64
fileprivate class UniFFICallbackHandleMap<T> {
    private var leftMap: [UniFFICallbackHandle: T] = [:]
    private var counter: [UniFFICallbackHandle: UInt64] = [:]
    private var rightMap: [ObjectIdentifier: UniFFICallbackHandle] = [:]

    private let lock = NSLock()
    private var currentHandle: UniFFICallbackHandle = 0
    private let stride: UniFFICallbackHandle = 1

    func insert(obj: T) -> UniFFICallbackHandle {
        lock.withLock {
            let id = ObjectIdentifier(obj as AnyObject)
            let handle = rightMap[id] ?? {
                currentHandle += stride
                let handle = currentHandle
                leftMap[handle] = obj
                rightMap[id] = handle
                return handle
            }()
            counter[handle] = (counter[handle] ?? 0) + 1
            return handle
        }
    }

    func get(handle: UniFFICallbackHandle) -> T? {
        lock.withLock {
            leftMap[handle]
        }
    }

    func delete(handle: UniFFICallbackHandle) {
        remove(handle: handle)
    }

    @discardableResult
    func remove(handle: UniFFICallbackHandle) -> T? {
        lock.withLock {
            defer { counter[handle] = (counter[handle] ?? 1) - 1 }
            guard counter[handle] == 1 else { return leftMap[handle] }
            let obj = leftMap.removeValue(forKey: handle)
            if let obj = obj {
                rightMap.removeValue(forKey: ObjectIdentifier(obj as AnyObject))
            }
            return obj
        }
    }
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0
// Callback return codes
private let UNIFFI_CALLBACK_SUCCESS: Int32 = 0
private let UNIFFI_CALLBACK_ERROR: Int32 = 1
private let UNIFFI_CALLBACK_UNEXPECTED_ERROR: Int32 = 2

// Declaration and FfiConverters for FileManager Callback Interface

public protocol FileManager : AnyObject {
    func `read`(`path`: String) throws -> [UInt8]
    func `write`(`path`: String, `data`: [UInt8]) throws
    func `exists`(`path`: String) throws -> Bool
    func `createDirectory`(`path`: String) throws
    
}

// The ForeignCallback that is passed to Rust.
fileprivate let foreignCallbackCallbackInterfaceFileManager : ForeignCallback =
    { (handle: UniFFICallbackHandle, method: Int32, argsData: UnsafePointer<UInt8>, argsLen: Int32, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in
    

    func `invokeRead`(_ swiftCallbackInterface: FileManager, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _ out_buf: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
        var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
        func makeCall() throws -> Int32 {
            let result = try swiftCallbackInterface.`read`(
                    `path`:  try FfiConverterString.read(from: &reader)
                    )
            var writer = [UInt8]()
            FfiConverterSequenceUInt8.write(result, into: &writer)
            out_buf.pointee = RustBuffer(bytes: writer)
            return UNIFFI_CALLBACK_SUCCESS
        }
        do {
            return try makeCall()
        } catch let error as FileManagerError {
            out_buf.pointee = FfiConverterTypeFileManagerError.lower(error)
            return UNIFFI_CALLBACK_ERROR
        }
    }

    func `invokeWrite`(_ swiftCallbackInterface: FileManager, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _ out_buf: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
        var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
        func makeCall() throws -> Int32 {
            try swiftCallbackInterface.`write`(
                    `path`:  try FfiConverterString.read(from: &reader), 
                    `data`:  try FfiConverterSequenceUInt8.read(from: &reader)
                    )
            return UNIFFI_CALLBACK_SUCCESS
        }
        do {
            return try makeCall()
        } catch let error as FileManagerError {
            out_buf.pointee = FfiConverterTypeFileManagerError.lower(error)
            return UNIFFI_CALLBACK_ERROR
        }
    }

    func `invokeExists`(_ swiftCallbackInterface: FileManager, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _ out_buf: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
        var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
        func makeCall() throws -> Int32 {
            let result = try swiftCallbackInterface.`exists`(
                    `path`:  try FfiConverterString.read(from: &reader)
                    )
            var writer = [UInt8]()
            FfiConverterBool.write(result, into: &writer)
            out_buf.pointee = RustBuffer(bytes: writer)
            return UNIFFI_CALLBACK_SUCCESS
        }
        do {
            return try makeCall()
        } catch let error as FileManagerError {
            out_buf.pointee = FfiConverterTypeFileManagerError.lower(error)
            return UNIFFI_CALLBACK_ERROR
        }
    }

    func `invokeCreateDirectory`(_ swiftCallbackInterface: FileManager, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _ out_buf: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
        var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
        func makeCall() throws -> Int32 {
            try swiftCallbackInterface.`createDirectory`(
                    `path`:  try FfiConverterString.read(from: &reader)
                    )
            return UNIFFI_CALLBACK_SUCCESS
        }
        do {
            return try makeCall()
        } catch let error as FileManagerError {
            out_buf.pointee = FfiConverterTypeFileManagerError.lower(error)
            return UNIFFI_CALLBACK_ERROR
        }
    }


    switch method {
        case IDX_CALLBACK_FREE:
            FfiConverterCallbackInterfaceFileManager.drop(handle: handle)
            // Sucessful return
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_SUCCESS
        case 1:
            let cb: FileManager
            do {
                cb = try FfiConverterCallbackInterfaceFileManager.lift(handle)
            } catch {
                out_buf.pointee = FfiConverterString.lower("FileManager: Invalid handle")
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
            do {
                return try `invokeRead`(cb, argsData, argsLen, out_buf)
            } catch let error {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
        case 2:
            let cb: FileManager
            do {
                cb = try FfiConverterCallbackInterfaceFileManager.lift(handle)
            } catch {
                out_buf.pointee = FfiConverterString.lower("FileManager: Invalid handle")
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
            do {
                return try `invokeWrite`(cb, argsData, argsLen, out_buf)
            } catch let error {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
        case 3:
            let cb: FileManager
            do {
                cb = try FfiConverterCallbackInterfaceFileManager.lift(handle)
            } catch {
                out_buf.pointee = FfiConverterString.lower("FileManager: Invalid handle")
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
            do {
                return try `invokeExists`(cb, argsData, argsLen, out_buf)
            } catch let error {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
        case 4:
            let cb: FileManager
            do {
                cb = try FfiConverterCallbackInterfaceFileManager.lift(handle)
            } catch {
                out_buf.pointee = FfiConverterString.lower("FileManager: Invalid handle")
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
            do {
                return try `invokeCreateDirectory`(cb, argsData, argsLen, out_buf)
            } catch let error {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
        
        // This should never happen, because an out of bounds method index won't
        // ever be used. Once we can catch errors, we should return an InternalError.
        // https://github.com/mozilla/uniffi-rs/issues/351
        default:
            // An unexpected error happened.
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    }
}

// FfiConverter protocol for callback interfaces
fileprivate struct FfiConverterCallbackInterfaceFileManager {
    private static let initCallbackOnce: () = {
        // Swift ensures this initializer code will once run once, even when accessed by multiple threads.
        try! rustCall { (err: UnsafeMutablePointer<RustCallStatus>) in
            uniffi_SwiftyTypst_fn_init_callback_filemanager(foreignCallbackCallbackInterfaceFileManager, err)
        }
    }()

    private static func ensureCallbackinitialized() {
        _ = initCallbackOnce
    }

    static func drop(handle: UniFFICallbackHandle) {
        handleMap.remove(handle: handle)
    }

    private static var handleMap = UniFFICallbackHandleMap<FileManager>()
}

extension FfiConverterCallbackInterfaceFileManager : FfiConverter {
    typealias SwiftType = FileManager
    // We can use Handle as the FfiType because it's a typealias to UInt64
    typealias FfiType = UniFFICallbackHandle

    public static func lift(_ handle: UniFFICallbackHandle) throws -> SwiftType {
        ensureCallbackinitialized();
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        ensureCallbackinitialized();
        let handle: UniFFICallbackHandle = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UniFFICallbackHandle {
        ensureCallbackinitialized();
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        ensureCallbackinitialized();
        writeInt(&buf, lower(v))
    }
}



// Declaration and FfiConverters for TypstCompilerDelegate Callback Interface

public protocol TypstCompilerDelegate : AnyObject {
    func `compilationFinished`(`result`: CompilationResult) 
    
}

// The ForeignCallback that is passed to Rust.
fileprivate let foreignCallbackCallbackInterfaceTypstCompilerDelegate : ForeignCallback =
    { (handle: UniFFICallbackHandle, method: Int32, argsData: UnsafePointer<UInt8>, argsLen: Int32, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in
    

    func `invokeCompilationFinished`(_ swiftCallbackInterface: TypstCompilerDelegate, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _ out_buf: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
        var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
        func makeCall() throws -> Int32 {
            try swiftCallbackInterface.`compilationFinished`(
                    `result`:  try FfiConverterTypeCompilationResult.read(from: &reader)
                    )
            return UNIFFI_CALLBACK_SUCCESS
        }
        return try makeCall()
    }


    switch method {
        case IDX_CALLBACK_FREE:
            FfiConverterCallbackInterfaceTypstCompilerDelegate.drop(handle: handle)
            // Sucessful return
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_SUCCESS
        case 1:
            let cb: TypstCompilerDelegate
            do {
                cb = try FfiConverterCallbackInterfaceTypstCompilerDelegate.lift(handle)
            } catch {
                out_buf.pointee = FfiConverterString.lower("TypstCompilerDelegate: Invalid handle")
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
            do {
                return try `invokeCompilationFinished`(cb, argsData, argsLen, out_buf)
            } catch let error {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
        
        // This should never happen, because an out of bounds method index won't
        // ever be used. Once we can catch errors, we should return an InternalError.
        // https://github.com/mozilla/uniffi-rs/issues/351
        default:
            // An unexpected error happened.
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    }
}

// FfiConverter protocol for callback interfaces
fileprivate struct FfiConverterCallbackInterfaceTypstCompilerDelegate {
    private static let initCallbackOnce: () = {
        // Swift ensures this initializer code will once run once, even when accessed by multiple threads.
        try! rustCall { (err: UnsafeMutablePointer<RustCallStatus>) in
            uniffi_SwiftyTypst_fn_init_callback_typstcompilerdelegate(foreignCallbackCallbackInterfaceTypstCompilerDelegate, err)
        }
    }()

    private static func ensureCallbackinitialized() {
        _ = initCallbackOnce
    }

    static func drop(handle: UniFFICallbackHandle) {
        handleMap.remove(handle: handle)
    }

    private static var handleMap = UniFFICallbackHandleMap<TypstCompilerDelegate>()
}

extension FfiConverterCallbackInterfaceTypstCompilerDelegate : FfiConverter {
    typealias SwiftType = TypstCompilerDelegate
    // We can use Handle as the FfiType because it's a typealias to UInt64
    typealias FfiType = UniFFICallbackHandle

    public static func lift(_ handle: UniFFICallbackHandle) throws -> SwiftType {
        ensureCallbackinitialized();
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        ensureCallbackinitialized();
        let handle: UniFFICallbackHandle = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UniFFICallbackHandle {
        ensureCallbackinitialized();
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        ensureCallbackinitialized();
        writeInt(&buf, lower(v))
    }
}



// Declaration and FfiConverters for TypstSourceDelegate Callback Interface

public protocol TypstSourceDelegate : AnyObject {
    func `highlightingFinished`(`result`: [HighlightResult]) 
    func `autocompleteFinished`(`result`: [AutocompleteResult]) 
    
}

// The ForeignCallback that is passed to Rust.
fileprivate let foreignCallbackCallbackInterfaceTypstSourceDelegate : ForeignCallback =
    { (handle: UniFFICallbackHandle, method: Int32, argsData: UnsafePointer<UInt8>, argsLen: Int32, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in
    

    func `invokeHighlightingFinished`(_ swiftCallbackInterface: TypstSourceDelegate, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _ out_buf: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
        var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
        func makeCall() throws -> Int32 {
            try swiftCallbackInterface.`highlightingFinished`(
                    `result`:  try FfiConverterSequenceTypeHighlightResult.read(from: &reader)
                    )
            return UNIFFI_CALLBACK_SUCCESS
        }
        return try makeCall()
    }

    func `invokeAutocompleteFinished`(_ swiftCallbackInterface: TypstSourceDelegate, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _ out_buf: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
        var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
        func makeCall() throws -> Int32 {
            try swiftCallbackInterface.`autocompleteFinished`(
                    `result`:  try FfiConverterSequenceTypeAutocompleteResult.read(from: &reader)
                    )
            return UNIFFI_CALLBACK_SUCCESS
        }
        return try makeCall()
    }


    switch method {
        case IDX_CALLBACK_FREE:
            FfiConverterCallbackInterfaceTypstSourceDelegate.drop(handle: handle)
            // Sucessful return
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_SUCCESS
        case 1:
            let cb: TypstSourceDelegate
            do {
                cb = try FfiConverterCallbackInterfaceTypstSourceDelegate.lift(handle)
            } catch {
                out_buf.pointee = FfiConverterString.lower("TypstSourceDelegate: Invalid handle")
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
            do {
                return try `invokeHighlightingFinished`(cb, argsData, argsLen, out_buf)
            } catch let error {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
        case 2:
            let cb: TypstSourceDelegate
            do {
                cb = try FfiConverterCallbackInterfaceTypstSourceDelegate.lift(handle)
            } catch {
                out_buf.pointee = FfiConverterString.lower("TypstSourceDelegate: Invalid handle")
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
            do {
                return try `invokeAutocompleteFinished`(cb, argsData, argsLen, out_buf)
            } catch let error {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
        
        // This should never happen, because an out of bounds method index won't
        // ever be used. Once we can catch errors, we should return an InternalError.
        // https://github.com/mozilla/uniffi-rs/issues/351
        default:
            // An unexpected error happened.
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    }
}

// FfiConverter protocol for callback interfaces
fileprivate struct FfiConverterCallbackInterfaceTypstSourceDelegate {
    private static let initCallbackOnce: () = {
        // Swift ensures this initializer code will once run once, even when accessed by multiple threads.
        try! rustCall { (err: UnsafeMutablePointer<RustCallStatus>) in
            uniffi_SwiftyTypst_fn_init_callback_typstsourcedelegate(foreignCallbackCallbackInterfaceTypstSourceDelegate, err)
        }
    }()

    private static func ensureCallbackinitialized() {
        _ = initCallbackOnce
    }

    static func drop(handle: UniFFICallbackHandle) {
        handleMap.remove(handle: handle)
    }

    private static var handleMap = UniFFICallbackHandleMap<TypstSourceDelegate>()
}

extension FfiConverterCallbackInterfaceTypstSourceDelegate : FfiConverter {
    typealias SwiftType = TypstSourceDelegate
    // We can use Handle as the FfiType because it's a typealias to UInt64
    typealias FfiType = UniFFICallbackHandle

    public static func lift(_ handle: UniFFICallbackHandle) throws -> SwiftType {
        ensureCallbackinitialized();
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        ensureCallbackinitialized();
        let handle: UniFFICallbackHandle = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UniFFICallbackHandle {
        ensureCallbackinitialized();
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        ensureCallbackinitialized();
        writeInt(&buf, lower(v))
    }
}

fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeSourceRange: FfiConverterRustBuffer {
    typealias SwiftType = SourceRange?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeSourceRange.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeSourceRange.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterSequenceUInt8: FfiConverterRustBuffer {
    typealias SwiftType = [UInt8]

    public static func write(_ value: [UInt8], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterUInt8.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt8] {
        let len: Int32 = try readInt(&buf)
        var seq = [UInt8]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterUInt8.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeAutocompleteResult: FfiConverterRustBuffer {
    typealias SwiftType = [AutocompleteResult]

    public static func write(_ value: [AutocompleteResult], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeAutocompleteResult.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [AutocompleteResult] {
        let len: Int32 = try readInt(&buf)
        var seq = [AutocompleteResult]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeAutocompleteResult.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeCompilationError: FfiConverterRustBuffer {
    typealias SwiftType = [CompilationError]

    public static func write(_ value: [CompilationError], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeCompilationError.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [CompilationError] {
        let len: Int32 = try readInt(&buf)
        var seq = [CompilationError]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeCompilationError.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeHighlightResult: FfiConverterRustBuffer {
    typealias SwiftType = [HighlightResult]

    public static func write(_ value: [HighlightResult], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeHighlightResult.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [HighlightResult] {
        let len: Int32 = try readInt(&buf)
        var seq = [HighlightResult]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeHighlightResult.read(from: &buf))
        }
        return seq
    }
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 22
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_SwiftyTypst_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_SwiftyTypst_checksum_method_typstcompiler_set_main() != 25091) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_SwiftyTypst_checksum_method_typstcompiler_add_font() != 1339) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_SwiftyTypst_checksum_method_typstcompiler_notify_change() != 38388) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_SwiftyTypst_checksum_method_typstcompiler_compile() != 23936) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_SwiftyTypst_checksum_method_typstcompiler_highlight() != 39260) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_SwiftyTypst_checksum_method_typstcompiler_autocomplete() != 16302) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_SwiftyTypst_checksum_constructor_typstcompiler_new() != 14559) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}